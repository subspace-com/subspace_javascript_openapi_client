/**
 * Subspace Product API
 * # Introduction  The Subspace API is based on REST, has resource-oriented URLs, returns JSON-encoded responses, and returns standardHTTP response codes.  The base URL for the API is `https://api.subspace.com/`  # Naming Convention  **EARLY ACCESS NOTE:** There is no “stable” version yet.  Once there is, the version name **stable** will be used to access the latest stable API version.   * Example: `https://api.subspace.com/stable` * Version name currently in use is: *v1*   * Example: `https://api.subspace.com/v1`  # Authentication  ## API Tokens  Subspace authenticates your API requests using JWT Bearer tokens.  The provided client library requires this JWT to be set before it can be used, by setting the local access token in the local configuration.  This is done by updating the configuration line marked \"YOUR ACCESS TOKEN\" by replacing the text \"YOUR ACCESS TOKEN\" with your JWT Bearer token.  Bearer tokens are granted by requesting one (as noted below) and presenting your publishable (client_id) and secret (client_secret) tokens.     Subspace provides two types of API tokens: publishable (client_id) and secret (client_secret).  These are available in the Subspace console.   * **Publishable** API tokens (client_id) are meant solely to identify your account with Subspace, they aren’t secret. They can be published in places like your website JavaScript code, or in an iPhone or Android app.   * **Secret** API tokens (client_secret) should be kept confidential and only stored on your own servers. Your account’s secret API token will allow you to acquire a valid JWT token authorized to perform any API request to Subspace.  ## Getting a JWT Bearer Token  Subspace uses auth0 for JWT token management.  You can acquire a JWT token by utilizing `https://id.subspace.com` and following the instructions in the curl example below.  ## Protecting Your API Tokens    * **JWT tokens have a expiration time of 24 hours.**  Once expired, you will have to use your Subspace private API and public token to request a new one.   * The Subspace private token can be rotated from within the Subspace console.  Rotation may take up to 10 minutes for all systems to update state to invalidate the older token and enable the new one. * **Keep your secret token safe.** Your secret token can make any API call on behalf of your account, including changes that may impact billing such as enabling pay-as-you-go charges. Do not store your secret token in your version control system. Do not use your secret token outside your web server, such as a browser, mobile app, or distributed file.   * **You may use the Subspace console to acquire an API token.**  * **You may use the Subspace console to disable pay-as-you-go.** This may prevent unexpected charges due to unauthorized or abnormal usage.  **Acquiring a valid JWT**  Command line example: ``` curl --request POST           --url 'https://id.subspace.com/oauth/token'           --header 'content-type: application/json'           --data '{ \"client_id\": YOURCLIENTID, \"client_secret\": YOURCLIENTSECRET, \"audience\": \"https://api.subspace.com/\", \"grant_type\": \"client_credentials\" }' ``` 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sales@subspace.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Body from '../model/Body';
import Body1 from '../model/Body1';
import RpcStatus from '../model/RpcStatus';
import V1Accelerator from '../model/V1Accelerator';
import V1ListAcceleratorsResponse from '../model/V1ListAcceleratorsResponse';

/**
* AcceleratorService service.
* @module api/AcceleratorServiceApi
* @version 1.0
*/
export default class AcceleratorServiceApi {

    /**
    * Constructs a new AcceleratorServiceApi. 
    * @alias module:api/AcceleratorServiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the acceleratorServiceCreate operation.
     * @callback module:api/AcceleratorServiceApi~acceleratorServiceCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Accelerator} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CreateAccelerator
     * CreateAccelerator generates a new PacketAccelerator
     * @param {module:model/Body} body Required parameters to create a new PacketAccelerator.  NOTE- only subspace_port is optional
     * @param {Object} opts Optional parameters
     * @param {String} opts.idempotencyKey Value is the returned etag of a get request.  If a retry sends an Idempotency-Key that has been seen before, the existing accelerator is returned with the status code of 200
     * @param {module:api/AcceleratorServiceApi~acceleratorServiceCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Accelerator}
     */
    acceleratorServiceCreate(body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling acceleratorServiceCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Idempotency-Key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['accessCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1Accelerator;
      return this.apiClient.callApi(
        '/v1/accelerators', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the acceleratorServiceDelete operation.
     * @callback module:api/AcceleratorServiceApi~acceleratorServiceDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DeleteAccelerator
     * DeleteAccelerator deletes the given PacketAccelerator, specified by its id
     * @param {String} id 
     * @param {module:api/AcceleratorServiceApi~acceleratorServiceDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    acceleratorServiceDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling acceleratorServiceDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/accelerators/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the acceleratorServiceGet operation.
     * @callback module:api/AcceleratorServiceApi~acceleratorServiceGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Accelerator} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetAccelerator
     * GetAccelerator returns the details of a given PacketAccelerator, specified by its id
     * @param {String} id 
     * @param {module:api/AcceleratorServiceApi~acceleratorServiceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Accelerator}
     */
    acceleratorServiceGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling acceleratorServiceGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = V1Accelerator;
      return this.apiClient.callApi(
        '/v1/accelerators/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the acceleratorServiceList operation.
     * @callback module:api/AcceleratorServiceApi~acceleratorServiceListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ListAcceleratorsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListAccelerators
     * ListAccelerators returns a list of all existing PacketAccelerators.
     * @param {Object} opts Optional parameters
     * @param {String} opts.before 
     * @param {Number} opts.limit 
     * @param {String} opts.q q Provides a query string which filters accelerators in the response.
     * @param {module:api/AcceleratorServiceApi~acceleratorServiceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ListAcceleratorsResponse}
     */
    acceleratorServiceList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'before': opts['before'],
        'limit': opts['limit'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = V1ListAcceleratorsResponse;
      return this.apiClient.callApi(
        '/v1/accelerators', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the acceleratorServiceUpdate operation.
     * @callback module:api/AcceleratorServiceApi~acceleratorServiceUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Accelerator} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UpdateAccelerator
     * UpdateAccelerator updates an existing accelerator, specified by its id
     * @param {String} id 
     * @param {module:model/Body1} body1 Parameters to update an existing PacketAccelerator, minimum requirement of one of them defined to update
     * @param {Object} opts Optional parameters
     * @param {Number} opts.ifMatch 
     * @param {module:api/AcceleratorServiceApi~acceleratorServiceUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Accelerator}
     */
    acceleratorServiceUpdate(id, body1, opts, callback) {
      opts = opts || {};
      let postBody = body1;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling acceleratorServiceUpdate");
      }
      // verify the required parameter 'body1' is set
      if (body1 === undefined || body1 === null) {
        throw new Error("Missing the required parameter 'body1' when calling acceleratorServiceUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['accessCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1Accelerator;
      return this.apiClient.callApi(
        '/v1/accelerators/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
